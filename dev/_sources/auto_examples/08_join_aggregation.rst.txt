
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/08_join_aggregation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_08_join_aggregation.py>`
        to download the full example code. or to run this example in your browser via JupyterLite or Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_08_join_aggregation.py:


Self-aggregation on MovieLens
=============================

MovieLens is a famous movie dataset used for both explicit
and implicit recommender systems. It provides a main table,
"ratings", that can be viewed as logs or transactions, comprised
of only 4 columns: ``userId``, ``movieId``, ``rating`` and ``timestamp``.
MovieLens also gives a contextual table "movies", including
``movieId``, ``title`` and ``types``, to enable content-based feature extraction.

From the perspective of machine-learning pipelines, one challenge is to
transform the transaction log into features that can be fed to supervised learning.

In this notebook, we only deal with the main table "ratings".
Our objective is **not to achieve state-of-the-art performance** on
the explicit regression task, but rather to illustrate how to perform
feature engineering in a simple way using |AggJoiner| and |AggTarget|.
Note that our performance is higher than the baseline of using the mean
rating per movies.

The benefit of using  |AggJoiner| and |AggTarget| is that they readily
provide a full pipeline, from the original tables to the prediction, that can
be cross-validated or applied to new data to serve prediction. At the end of
this example, we showcase hyper-parameter optimization on the whole pipeline.


.. |AggJoiner| replace::
     :class:`~skrub.AggJoiner`

.. |AggTarget| replace::
     :class:`~skrub.AggTarget`

.. |TableVectorizer| replace::
     :class:`~skrub.TableVectorizer`

.. |DatetimeEncoder| replace::
     :class:`~skrub.DatetimeEncoder`

.. |TargetEncoder| replace::
     :class:`~sklearn.preprocessing.TargetEncoder`

.. |make_pipeline| replace::
     :class:`~sklearn.pipeline.make_pipeline`

.. |Pipeline| replace::
     :class:`~sklearn.pipeline.Pipeline`

.. |GridSearchCV| replace::
     :class:`~sklearn.model_selection.GridSearchCV`

.. |TimeSeriesSplit| replace::
     :class:`~sklearn.model_selection.TimeSeriesSplit`

.. |HGBR| replace::
     :class:`~sklearn.ensemble.HistGradientBoostingRegressor`

.. GENERATED FROM PYTHON SOURCE LINES 60-65

The data
--------

We begin with loading the ratings table from MovieLens.
Note that we use the light version (100k rows).

.. GENERATED FROM PYTHON SOURCE LINES 65-76

.. code-block:: Python

    import pandas as pd

    from skrub.datasets import fetch_movielens

    ratings = fetch_movielens(dataset_id="ratings")
    ratings = ratings.X.sort_values("timestamp").reset_index(drop=True)
    ratings["timestamp"] = pd.to_datetime(ratings["timestamp"], unit="s")

    X = ratings[["userId", "movieId", "timestamp"]]
    y = ratings["rating"]
    X.shape, y.shape




.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    ((100836, 3), (100836,))



.. GENERATED FROM PYTHON SOURCE LINES 77-79

.. code-block:: Python

    X.head()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>userId</th>
          <th>movieId</th>
          <th>timestamp</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>429</td>
          <td>22</td>
          <td>1996-03-29 18:36:55</td>
        </tr>
        <tr>
          <th>1</th>
          <td>429</td>
          <td>150</td>
          <td>1996-03-29 18:36:55</td>
        </tr>
        <tr>
          <th>2</th>
          <td>429</td>
          <td>161</td>
          <td>1996-03-29 18:36:55</td>
        </tr>
        <tr>
          <th>3</th>
          <td>429</td>
          <td>165</td>
          <td>1996-03-29 18:36:55</td>
        </tr>
        <tr>
          <th>4</th>
          <td>429</td>
          <td>218</td>
          <td>1996-03-29 18:36:55</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 80-86

Encoding the timestamp with a TableVectorizer
---------------------------------------------

Our first step is to extract features from the timestamp, using the
|TableVectorizer|. Natively, it uses the |DatetimeEncoder| on datetime
columns, and doesn't interact with numerical columns.

.. GENERATED FROM PYTHON SOURCE LINES 86-94

.. code-block:: Python

    from skrub import DatetimeEncoder, TableVectorizer

    table_vectorizer = TableVectorizer(
        datetime_transformer=DatetimeEncoder(add_weekday=True)
    )
    X_date_encoded = table_vectorizer.fit_transform(X)
    X_date_encoded.head()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>userId</th>
          <th>movieId</th>
          <th>timestamp_year</th>
          <th>timestamp_month</th>
          <th>timestamp_day</th>
          <th>timestamp_hour</th>
          <th>timestamp_total_seconds</th>
          <th>timestamp_weekday</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>429.0</td>
          <td>22.0</td>
          <td>1996.0</td>
          <td>3.0</td>
          <td>29.0</td>
          <td>18.0</td>
          <td>828124608.0</td>
          <td>5.0</td>
        </tr>
        <tr>
          <th>1</th>
          <td>429.0</td>
          <td>150.0</td>
          <td>1996.0</td>
          <td>3.0</td>
          <td>29.0</td>
          <td>18.0</td>
          <td>828124608.0</td>
          <td>5.0</td>
        </tr>
        <tr>
          <th>2</th>
          <td>429.0</td>
          <td>161.0</td>
          <td>1996.0</td>
          <td>3.0</td>
          <td>29.0</td>
          <td>18.0</td>
          <td>828124608.0</td>
          <td>5.0</td>
        </tr>
        <tr>
          <th>3</th>
          <td>429.0</td>
          <td>165.0</td>
          <td>1996.0</td>
          <td>3.0</td>
          <td>29.0</td>
          <td>18.0</td>
          <td>828124608.0</td>
          <td>5.0</td>
        </tr>
        <tr>
          <th>4</th>
          <td>429.0</td>
          <td>218.0</td>
          <td>1996.0</td>
          <td>3.0</td>
          <td>29.0</td>
          <td>18.0</td>
          <td>828124608.0</td>
          <td>5.0</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 95-96

We can now make a couple of plots and gain some insight on our dataset.

.. GENERATED FROM PYTHON SOURCE LINES 96-123

.. code-block:: Python

    import seaborn as sns
    from matplotlib import pyplot as plt

    sns.set_style("darkgrid")


    def make_barplot(x, y, title):
        fig, ax = plt.subplots(layout="constrained")
        norm = plt.Normalize(y.min(), y.max())
        cmap = plt.get_cmap("magma")

        sns.barplot(x=x, y=y, palette=cmap(norm(y)), ax=ax)
        ax.set_title(title)
        ax.set_xticks(ax.get_xticks(), labels=ax.get_xticklabels(), rotation=30)
        ax.set_ylabel(None)


    # O is Monday, 6 is Sunday

    daily_volume = X_date_encoded["timestamp_weekday"].value_counts().sort_index()

    make_barplot(
        x=daily_volume.index,
        y=daily_volume.values,
        title="Daily volume of ratings",
    )




.. image-sg:: /auto_examples/images/sphx_glr_08_join_aggregation_001.png
   :alt: Daily volume of ratings
   :srcset: /auto_examples/images/sphx_glr_08_join_aggregation_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/circleci/project/examples/08_join_aggregation.py:107: FutureWarning: 

    Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

      sns.barplot(x=x, y=y, palette=cmap(norm(y)), ax=ax)
    /home/circleci/project/examples/08_join_aggregation.py:107: UserWarning: Numpy array is not a supported type for `palette`. Please convert your palette to a list. This will become an error in v0.14
      sns.barplot(x=x, y=y, palette=cmap(norm(y)), ax=ax)




.. GENERATED FROM PYTHON SOURCE LINES 124-125

We also display the distribution of our target ``y``.

.. GENERATED FROM PYTHON SOURCE LINES 125-134

.. code-block:: Python

    rating_count = y.value_counts().sort_index()

    make_barplot(
        x=rating_count.index,
        y=rating_count.values,
        title="Distribution of ratings given to movies",
    )





.. image-sg:: /auto_examples/images/sphx_glr_08_join_aggregation_002.png
   :alt: Distribution of ratings given to movies
   :srcset: /auto_examples/images/sphx_glr_08_join_aggregation_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/circleci/project/examples/08_join_aggregation.py:107: FutureWarning: 

    Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

      sns.barplot(x=x, y=y, palette=cmap(norm(y)), ax=ax)
    /home/circleci/project/examples/08_join_aggregation.py:107: UserWarning: Numpy array is not a supported type for `palette`. Please convert your palette to a list. This will become an error in v0.14
      sns.barplot(x=x, y=y, palette=cmap(norm(y)), ax=ax)




.. GENERATED FROM PYTHON SOURCE LINES 135-158

AggTarget: aggregate y, then join
---------------------------------

We have just extracted datetime features from timestamps.

Let's now perform an expansion for the target ``y``, by aggregating it before
joining it back on the main table. The biggest risk of doing target expansion
with multiple dataframe operations yourself is to end up leaking the target.

To solve this, the |AggTarget| transformer allows you to
aggregate the target ``y`` before joining it on the main table, without
risk of leaking. Note that to perform aggregation then joining on the features
``X``, you need to use |AggJoiner| instead.

You can also think of it as a generalization of the |TargetEncoder|, which
encodes categorical features based on the target.

We only focus on aggregating the target by **users**, but later we will
also consider aggregating by **movies**. Here, we compute the histogram of the
target with 3 bins, before joining it back on the initial table.

This feature answer questions like
*"How many times has this user given a bad, medium or good rate to movies?"*.

.. GENERATED FROM PYTHON SOURCE LINES 158-168

.. code-block:: Python

    from skrub import AggTarget

    agg_target_user = AggTarget(
        main_key="userId",
        suffix="_user",
        operation="hist(3)",
    )
    X_transformed = agg_target_user.fit_transform(X, y)

    X_transformed.shape




.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (100836, 6)



.. GENERATED FROM PYTHON SOURCE LINES 169-171

.. code-block:: Python

    X_transformed.head()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>userId</th>
          <th>movieId</th>
          <th>timestamp</th>
          <th>rating_(0.499, 2.0]_user</th>
          <th>rating_(2.0, 3.5]_user</th>
          <th>rating_(3.5, 5.0]_user</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>429</td>
          <td>22</td>
          <td>1996-03-29 18:36:55</td>
          <td>2</td>
          <td>14</td>
          <td>42</td>
        </tr>
        <tr>
          <th>1</th>
          <td>429</td>
          <td>150</td>
          <td>1996-03-29 18:36:55</td>
          <td>2</td>
          <td>14</td>
          <td>42</td>
        </tr>
        <tr>
          <th>2</th>
          <td>429</td>
          <td>161</td>
          <td>1996-03-29 18:36:55</td>
          <td>2</td>
          <td>14</td>
          <td>42</td>
        </tr>
        <tr>
          <th>3</th>
          <td>429</td>
          <td>165</td>
          <td>1996-03-29 18:36:55</td>
          <td>2</td>
          <td>14</td>
          <td>42</td>
        </tr>
        <tr>
          <th>4</th>
          <td>429</td>
          <td>218</td>
          <td>1996-03-29 18:36:55</td>
          <td>2</td>
          <td>14</td>
          <td>42</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 172-176

Similarly, we join on ``movieId`` instead of ``userId``.

This feature answer questions like
*"How many times has this movie received a bad, medium or good rate from users?"*.

.. GENERATED FROM PYTHON SOURCE LINES 176-183

.. code-block:: Python

    agg_target_movie = AggTarget(
        main_key="movieId",
        suffix="_movie",
        operation="hist(3)",
    )
    X_transformed = agg_target_movie.fit_transform(X, y)
    X_transformed.shape




.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (100836, 6)



.. GENERATED FROM PYTHON SOURCE LINES 184-186

.. code-block:: Python

    X_transformed.head()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>userId</th>
          <th>movieId</th>
          <th>timestamp</th>
          <th>rating_(0.499, 2.0]_movie</th>
          <th>rating_(2.0, 3.5]_movie</th>
          <th>rating_(3.5, 5.0]_movie</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>429</td>
          <td>22</td>
          <td>1996-03-29 18:36:55</td>
          <td>4</td>
          <td>24</td>
          <td>8</td>
        </tr>
        <tr>
          <th>1</th>
          <td>429</td>
          <td>150</td>
          <td>1996-03-29 18:36:55</td>
          <td>13</td>
          <td>61</td>
          <td>127</td>
        </tr>
        <tr>
          <th>2</th>
          <td>429</td>
          <td>161</td>
          <td>1996-03-29 18:36:55</td>
          <td>8</td>
          <td>38</td>
          <td>57</td>
        </tr>
        <tr>
          <th>3</th>
          <td>429</td>
          <td>165</td>
          <td>1996-03-29 18:36:55</td>
          <td>14</td>
          <td>64</td>
          <td>66</td>
        </tr>
        <tr>
          <th>4</th>
          <td>429</td>
          <td>218</td>
          <td>1996-03-29 18:36:55</td>
          <td>3</td>
          <td>4</td>
          <td>7</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 187-193

Chaining everything together in a pipeline
------------------------------------------

To perform cross-validation and enable hyper-parameter tuning, we gather
all elements into a scikit-learn |Pipeline| by using |make_pipeline|,
and define a scikit-learn |HGBR|.

.. GENERATED FROM PYTHON SOURCE LINES 193-205

.. code-block:: Python

    from sklearn.ensemble import HistGradientBoostingRegressor
    from sklearn.pipeline import make_pipeline

    pipeline = make_pipeline(
        table_vectorizer,
        agg_target_user,
        agg_target_movie,
        HistGradientBoostingRegressor(learning_rate=0.1, max_depth=4, max_iter=40),
    )

    pipeline






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-container-id-5 {
      /* Definition of color scheme common for light and dark mode */
      --sklearn-color-text: black;
      --sklearn-color-line: gray;
      /* Definition of color scheme for unfitted estimators */
      --sklearn-color-unfitted-level-0: #fff5e6;
      --sklearn-color-unfitted-level-1: #f6e4d2;
      --sklearn-color-unfitted-level-2: #ffe0b3;
      --sklearn-color-unfitted-level-3: chocolate;
      /* Definition of color scheme for fitted estimators */
      --sklearn-color-fitted-level-0: #f0f8ff;
      --sklearn-color-fitted-level-1: #d4ebff;
      --sklearn-color-fitted-level-2: #b3dbfd;
      --sklearn-color-fitted-level-3: cornflowerblue;

      /* Specific color for light theme */
      --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
      --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));
      --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
      --sklearn-color-icon: #696969;

      @media (prefers-color-scheme: dark) {
        /* Redefinition of color scheme for dark theme */
        --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
        --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));
        --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
        --sklearn-color-icon: #878787;
      }
    }

    #sk-container-id-5 {
      color: var(--sklearn-color-text);
    }

    #sk-container-id-5 pre {
      padding: 0;
    }

    #sk-container-id-5 input.sk-hidden--visually {
      border: 0;
      clip: rect(1px 1px 1px 1px);
      clip: rect(1px, 1px, 1px, 1px);
      height: 1px;
      margin: -1px;
      overflow: hidden;
      padding: 0;
      position: absolute;
      width: 1px;
    }

    #sk-container-id-5 div.sk-dashed-wrapped {
      border: 1px dashed var(--sklearn-color-line);
      margin: 0 0.4em 0.5em 0.4em;
      box-sizing: border-box;
      padding-bottom: 0.4em;
      background-color: var(--sklearn-color-background);
    }

    #sk-container-id-5 div.sk-container {
      /* jupyter's `normalize.less` sets `[hidden] { display: none; }`
         but bootstrap.min.css set `[hidden] { display: none !important; }`
         so we also need the `!important` here to be able to override the
         default hidden behavior on the sphinx rendered scikit-learn.org.
         See: https://github.com/scikit-learn/scikit-learn/issues/21755 */
      display: inline-block !important;
      position: relative;
    }

    #sk-container-id-5 div.sk-text-repr-fallback {
      display: none;
    }

    div.sk-parallel-item,
    div.sk-serial,
    div.sk-item {
      /* draw centered vertical line to link estimators */
      background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));
      background-size: 2px 100%;
      background-repeat: no-repeat;
      background-position: center center;
    }

    /* Parallel-specific style estimator block */

    #sk-container-id-5 div.sk-parallel-item::after {
      content: "";
      width: 100%;
      border-bottom: 2px solid var(--sklearn-color-text-on-default-background);
      flex-grow: 1;
    }

    #sk-container-id-5 div.sk-parallel {
      display: flex;
      align-items: stretch;
      justify-content: center;
      background-color: var(--sklearn-color-background);
      position: relative;
    }

    #sk-container-id-5 div.sk-parallel-item {
      display: flex;
      flex-direction: column;
    }

    #sk-container-id-5 div.sk-parallel-item:first-child::after {
      align-self: flex-end;
      width: 50%;
    }

    #sk-container-id-5 div.sk-parallel-item:last-child::after {
      align-self: flex-start;
      width: 50%;
    }

    #sk-container-id-5 div.sk-parallel-item:only-child::after {
      width: 0;
    }

    /* Serial-specific style estimator block */

    #sk-container-id-5 div.sk-serial {
      display: flex;
      flex-direction: column;
      align-items: center;
      background-color: var(--sklearn-color-background);
      padding-right: 1em;
      padding-left: 1em;
    }


    /* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is
    clickable and can be expanded/collapsed.
    - Pipeline and ColumnTransformer use this feature and define the default style
    - Estimators will overwrite some part of the style using the `sk-estimator` class
    */

    /* Pipeline and ColumnTransformer style (default) */

    #sk-container-id-5 div.sk-toggleable {
      /* Default theme specific background. It is overwritten whether we have a
      specific estimator or a Pipeline/ColumnTransformer */
      background-color: var(--sklearn-color-background);
    }

    /* Toggleable label */
    #sk-container-id-5 label.sk-toggleable__label {
      cursor: pointer;
      display: block;
      width: 100%;
      margin-bottom: 0;
      padding: 0.5em;
      box-sizing: border-box;
      text-align: center;
    }

    #sk-container-id-5 label.sk-toggleable__label-arrow:before {
      /* Arrow on the left of the label */
      content: "▸";
      float: left;
      margin-right: 0.25em;
      color: var(--sklearn-color-icon);
    }

    #sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {
      color: var(--sklearn-color-text);
    }

    /* Toggleable content - dropdown */

    #sk-container-id-5 div.sk-toggleable__content {
      max-height: 0;
      max-width: 0;
      overflow: hidden;
      text-align: left;
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-0);
    }

    #sk-container-id-5 div.sk-toggleable__content.fitted {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-0);
    }

    #sk-container-id-5 div.sk-toggleable__content pre {
      margin: 0.2em;
      border-radius: 0.25em;
      color: var(--sklearn-color-text);
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-0);
    }

    #sk-container-id-5 div.sk-toggleable__content.fitted pre {
      /* unfitted */
      background-color: var(--sklearn-color-fitted-level-0);
    }

    #sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {
      /* Expand drop-down */
      max-height: 200px;
      max-width: 100%;
      overflow: auto;
    }

    #sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {
      content: "▾";
    }

    /* Pipeline/ColumnTransformer-specific style */

    #sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {
      color: var(--sklearn-color-text);
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    #sk-container-id-5 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
      background-color: var(--sklearn-color-fitted-level-2);
    }

    /* Estimator-specific style */

    /* Colorize estimator box */
    #sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    #sk-container-id-5 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-2);
    }

    #sk-container-id-5 div.sk-label label.sk-toggleable__label,
    #sk-container-id-5 div.sk-label label {
      /* The background is the default theme color */
      color: var(--sklearn-color-text-on-default-background);
    }

    /* On hover, darken the color of the background */
    #sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {
      color: var(--sklearn-color-text);
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    /* Label box, darken color on hover, fitted */
    #sk-container-id-5 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {
      color: var(--sklearn-color-text);
      background-color: var(--sklearn-color-fitted-level-2);
    }

    /* Estimator label */

    #sk-container-id-5 div.sk-label label {
      font-family: monospace;
      font-weight: bold;
      display: inline-block;
      line-height: 1.2em;
    }

    #sk-container-id-5 div.sk-label-container {
      text-align: center;
    }

    /* Estimator-specific */
    #sk-container-id-5 div.sk-estimator {
      font-family: monospace;
      border: 1px dotted var(--sklearn-color-border-box);
      border-radius: 0.25em;
      box-sizing: border-box;
      margin-bottom: 0.5em;
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-0);
    }

    #sk-container-id-5 div.sk-estimator.fitted {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-0);
    }

    /* on hover */
    #sk-container-id-5 div.sk-estimator:hover {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    #sk-container-id-5 div.sk-estimator.fitted:hover {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-2);
    }

    /* Specification for estimator info (e.g. "i" and "?") */

    /* Common style for "i" and "?" */

    .sk-estimator-doc-link,
    a:link.sk-estimator-doc-link,
    a:visited.sk-estimator-doc-link {
      float: right;
      font-size: smaller;
      line-height: 1em;
      font-family: monospace;
      background-color: var(--sklearn-color-background);
      border-radius: 1em;
      height: 1em;
      width: 1em;
      text-decoration: none !important;
      margin-left: 1ex;
      /* unfitted */
      border: var(--sklearn-color-unfitted-level-1) 1pt solid;
      color: var(--sklearn-color-unfitted-level-1);
    }

    .sk-estimator-doc-link.fitted,
    a:link.sk-estimator-doc-link.fitted,
    a:visited.sk-estimator-doc-link.fitted {
      /* fitted */
      border: var(--sklearn-color-fitted-level-1) 1pt solid;
      color: var(--sklearn-color-fitted-level-1);
    }

    /* On hover */
    div.sk-estimator:hover .sk-estimator-doc-link:hover,
    .sk-estimator-doc-link:hover,
    div.sk-label-container:hover .sk-estimator-doc-link:hover,
    .sk-estimator-doc-link:hover {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-3);
      color: var(--sklearn-color-background);
      text-decoration: none;
    }

    div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,
    .sk-estimator-doc-link.fitted:hover,
    div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,
    .sk-estimator-doc-link.fitted:hover {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-3);
      color: var(--sklearn-color-background);
      text-decoration: none;
    }

    /* Span, style for the box shown on hovering the info icon */
    .sk-estimator-doc-link span {
      display: none;
      z-index: 9999;
      position: relative;
      font-weight: normal;
      right: .2ex;
      padding: .5ex;
      margin: .5ex;
      width: min-content;
      min-width: 20ex;
      max-width: 50ex;
      color: var(--sklearn-color-text);
      box-shadow: 2pt 2pt 4pt #999;
      /* unfitted */
      background: var(--sklearn-color-unfitted-level-0);
      border: .5pt solid var(--sklearn-color-unfitted-level-3);
    }

    .sk-estimator-doc-link.fitted span {
      /* fitted */
      background: var(--sklearn-color-fitted-level-0);
      border: var(--sklearn-color-fitted-level-3);
    }

    .sk-estimator-doc-link:hover span {
      display: block;
    }

    /* "?"-specific style due to the `<a>` HTML tag */

    #sk-container-id-5 a.estimator_doc_link {
      float: right;
      font-size: 1rem;
      line-height: 1em;
      font-family: monospace;
      background-color: var(--sklearn-color-background);
      border-radius: 1rem;
      height: 1rem;
      width: 1rem;
      text-decoration: none;
      /* unfitted */
      color: var(--sklearn-color-unfitted-level-1);
      border: var(--sklearn-color-unfitted-level-1) 1pt solid;
    }

    #sk-container-id-5 a.estimator_doc_link.fitted {
      /* fitted */
      border: var(--sklearn-color-fitted-level-1) 1pt solid;
      color: var(--sklearn-color-fitted-level-1);
    }

    /* On hover */
    #sk-container-id-5 a.estimator_doc_link:hover {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-3);
      color: var(--sklearn-color-background);
      text-decoration: none;
    }

    #sk-container-id-5 a.estimator_doc_link.fitted:hover {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-3);
    }
    </style><div id="sk-container-id-5" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;tablevectorizer&#x27;,
                     TableVectorizer(datetime_transformer=DatetimeEncoder(add_weekday=True))),
                    (&#x27;aggtarget-1&#x27;,
                     AggTarget(main_key=&#x27;userId&#x27;, operation=&#x27;hist(3)&#x27;,
                               suffix=&#x27;_user&#x27;)),
                    (&#x27;aggtarget-2&#x27;,
                     AggTarget(main_key=&#x27;movieId&#x27;, operation=&#x27;hist(3)&#x27;,
                               suffix=&#x27;_movie&#x27;)),
                    (&#x27;histgradientboostingregressor&#x27;,
                     HistGradientBoostingRegressor(max_depth=4, max_iter=40))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label  sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-23" type="checkbox" ><label for="sk-estimator-id-23" class="sk-toggleable__label  sk-toggleable__label-arrow ">&nbsp;&nbsp;Pipeline<a class="sk-estimator-doc-link " rel="noreferrer" target="_blank" href="https://scikit-learn.org/1.5/modules/generated/sklearn.pipeline.Pipeline.html">?<span>Documentation for Pipeline</span></a><span class="sk-estimator-doc-link ">i<span>Not fitted</span></span></label><div class="sk-toggleable__content "><pre>Pipeline(steps=[(&#x27;tablevectorizer&#x27;,
                     TableVectorizer(datetime_transformer=DatetimeEncoder(add_weekday=True))),
                    (&#x27;aggtarget-1&#x27;,
                     AggTarget(main_key=&#x27;userId&#x27;, operation=&#x27;hist(3)&#x27;,
                               suffix=&#x27;_user&#x27;)),
                    (&#x27;aggtarget-2&#x27;,
                     AggTarget(main_key=&#x27;movieId&#x27;, operation=&#x27;hist(3)&#x27;,
                               suffix=&#x27;_movie&#x27;)),
                    (&#x27;histgradientboostingregressor&#x27;,
                     HistGradientBoostingRegressor(max_depth=4, max_iter=40))])</pre></div> </div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label  sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-24" type="checkbox" ><label for="sk-estimator-id-24" class="sk-toggleable__label  sk-toggleable__label-arrow ">tablevectorizer: TableVectorizer</label><div class="sk-toggleable__content "><pre>TableVectorizer(datetime_transformer=DatetimeEncoder(add_weekday=True))</pre></div> </div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label  sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-25" type="checkbox" ><label for="sk-estimator-id-25" class="sk-toggleable__label  sk-toggleable__label-arrow ">datetime_transformer: DatetimeEncoder</label><div class="sk-toggleable__content "><pre>DatetimeEncoder(add_weekday=True)</pre></div> </div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator  sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-26" type="checkbox" ><label for="sk-estimator-id-26" class="sk-toggleable__label  sk-toggleable__label-arrow ">DatetimeEncoder</label><div class="sk-toggleable__content "><pre>DatetimeEncoder(add_weekday=True)</pre></div> </div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label  sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-27" type="checkbox" ><label for="sk-estimator-id-27" class="sk-toggleable__label  sk-toggleable__label-arrow ">high_cardinality_transformer: GapEncoder</label><div class="sk-toggleable__content "><pre>GapEncoder(n_components=30)</pre></div> </div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator  sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-28" type="checkbox" ><label for="sk-estimator-id-28" class="sk-toggleable__label  sk-toggleable__label-arrow ">GapEncoder</label><div class="sk-toggleable__content "><pre>GapEncoder(n_components=30)</pre></div> </div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label  sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-29" type="checkbox" ><label for="sk-estimator-id-29" class="sk-toggleable__label  sk-toggleable__label-arrow ">low_cardinality_transformer: OneHotEncoder</label><div class="sk-toggleable__content "><pre>OneHotEncoder(drop=&#x27;if_binary&#x27;, dtype=&#x27;float32&#x27;, handle_unknown=&#x27;ignore&#x27;,
                  sparse_output=False)</pre></div> </div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator  sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-30" type="checkbox" ><label for="sk-estimator-id-30" class="sk-toggleable__label  sk-toggleable__label-arrow ">&nbsp;OneHotEncoder<a class="sk-estimator-doc-link " rel="noreferrer" target="_blank" href="https://scikit-learn.org/1.5/modules/generated/sklearn.preprocessing.OneHotEncoder.html">?<span>Documentation for OneHotEncoder</span></a></label><div class="sk-toggleable__content "><pre>OneHotEncoder(drop=&#x27;if_binary&#x27;, dtype=&#x27;float32&#x27;, handle_unknown=&#x27;ignore&#x27;,
                  sparse_output=False)</pre></div> </div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label  sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-31" type="checkbox" ><label for="sk-estimator-id-31" class="sk-toggleable__label  sk-toggleable__label-arrow ">numeric_transformer: PassThrough</label><div class="sk-toggleable__content "><pre>PassThrough()</pre></div> </div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator  sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-32" type="checkbox" ><label for="sk-estimator-id-32" class="sk-toggleable__label  sk-toggleable__label-arrow ">PassThrough</label><div class="sk-toggleable__content "><pre>PassThrough()</pre></div> </div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator  sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-33" type="checkbox" ><label for="sk-estimator-id-33" class="sk-toggleable__label  sk-toggleable__label-arrow ">AggTarget</label><div class="sk-toggleable__content "><pre>AggTarget(main_key=&#x27;userId&#x27;, operation=&#x27;hist(3)&#x27;, suffix=&#x27;_user&#x27;)</pre></div> </div></div><div class="sk-item"><div class="sk-estimator  sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-34" type="checkbox" ><label for="sk-estimator-id-34" class="sk-toggleable__label  sk-toggleable__label-arrow ">AggTarget</label><div class="sk-toggleable__content "><pre>AggTarget(main_key=&#x27;movieId&#x27;, operation=&#x27;hist(3)&#x27;, suffix=&#x27;_movie&#x27;)</pre></div> </div></div><div class="sk-item"><div class="sk-estimator  sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-35" type="checkbox" ><label for="sk-estimator-id-35" class="sk-toggleable__label  sk-toggleable__label-arrow ">&nbsp;HistGradientBoostingRegressor<a class="sk-estimator-doc-link " rel="noreferrer" target="_blank" href="https://scikit-learn.org/1.5/modules/generated/sklearn.ensemble.HistGradientBoostingRegressor.html">?<span>Documentation for HistGradientBoostingRegressor</span></a></label><div class="sk-toggleable__content "><pre>HistGradientBoostingRegressor(max_depth=4, max_iter=40)</pre></div> </div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 206-218

Hyper-parameters tuning and cross validation
--------------------------------------------

We can finally create our hyper-parameter search space, and use a
|GridSearchCV|. We select the cross validation splitter to be
the |TimeSeriesSplit| to prevent leakage, since our data are timestamped
logs.

Note that you need the name of the pipeline elements to assign them
hyper-parameters search.

You can lookup the name of the pipeline elements by doing:

.. GENERATED FROM PYTHON SOURCE LINES 218-220

.. code-block:: Python

    list(pipeline.named_steps)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    ['tablevectorizer', 'aggtarget-1', 'aggtarget-2', 'histgradientboostingregressor']



.. GENERATED FROM PYTHON SOURCE LINES 221-226

Alternatively, you can use scikit-learn |Pipeline| to name your transformers:
``Pipeline([("agg_target_user", agg_target_user), ...])``

We now perform the grid search over the ``AggTarget`` transformers to find the
operation maximizing our validation score.

.. GENERATED FROM PYTHON SOURCE LINES 226-245

.. code-block:: Python

    from sklearn.model_selection import GridSearchCV, TimeSeriesSplit

    operations = ["mean", "hist(3)", "hist(5)", "hist(7)", "value_counts"]
    param_grid = [
        {
            "aggtarget-2__operation": [op],
        }
        for op in operations
    ]

    cv = GridSearchCV(pipeline, param_grid, cv=TimeSeriesSplit(n_splits=10))
    cv.fit(X, y)

    results = pd.DataFrame(cv.cv_results_)

    cols = [f"split{idx}_test_score" for idx in range(10)]
    results = results.set_index("param_aggtarget-2__operation")[cols].T
    results






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>param_aggtarget-2__operation</th>
          <th>mean</th>
          <th>hist(3)</th>
          <th>hist(5)</th>
          <th>hist(7)</th>
          <th>value_counts</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>split0_test_score</th>
          <td>0.034264</td>
          <td>0.027167</td>
          <td>0.009765</td>
          <td>0.009765</td>
          <td>0.009765</td>
        </tr>
        <tr>
          <th>split1_test_score</th>
          <td>0.050045</td>
          <td>0.053767</td>
          <td>0.078737</td>
          <td>0.053129</td>
          <td>0.072831</td>
        </tr>
        <tr>
          <th>split2_test_score</th>
          <td>0.086253</td>
          <td>0.074613</td>
          <td>0.087878</td>
          <td>0.092972</td>
          <td>0.091932</td>
        </tr>
        <tr>
          <th>split3_test_score</th>
          <td>0.035900</td>
          <td>0.050641</td>
          <td>0.059515</td>
          <td>0.057001</td>
          <td>0.079305</td>
        </tr>
        <tr>
          <th>split4_test_score</th>
          <td>0.142866</td>
          <td>0.112558</td>
          <td>0.148249</td>
          <td>0.160740</td>
          <td>0.153649</td>
        </tr>
        <tr>
          <th>split5_test_score</th>
          <td>0.102477</td>
          <td>0.109385</td>
          <td>0.109823</td>
          <td>0.109223</td>
          <td>0.116265</td>
        </tr>
        <tr>
          <th>split6_test_score</th>
          <td>0.080464</td>
          <td>0.100161</td>
          <td>0.102365</td>
          <td>0.104079</td>
          <td>0.112516</td>
        </tr>
        <tr>
          <th>split7_test_score</th>
          <td>0.072742</td>
          <td>0.055483</td>
          <td>0.076294</td>
          <td>0.075417</td>
          <td>0.068944</td>
        </tr>
        <tr>
          <th>split8_test_score</th>
          <td>0.107041</td>
          <td>0.115802</td>
          <td>0.116060</td>
          <td>0.127010</td>
          <td>0.124278</td>
        </tr>
        <tr>
          <th>split9_test_score</th>
          <td>0.124300</td>
          <td>0.156898</td>
          <td>0.170952</td>
          <td>0.162645</td>
          <td>0.185299</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 246-255

The score used in this regression task is the R2. Remember that the R2
evaluates the relative performance compared to the naive baseline consisting
in always predicting the mean value of ``y_test``.
Therefore, the R2 is 0 when ``y_pred = y_true.mean()`` and is upper bounded
to 1 when ``y_pred = y_true``.

To get a better sense of the learning performances of our simple pipeline,
we also compute the average rating of each movie in the training set,
and uses this average to predict the ratings in the test set.

.. GENERATED FROM PYTHON SOURCE LINES 255-292

.. code-block:: Python

    from sklearn.metrics import r2_score


    def baseline_r2(X, y, train_idx, test_idx):
        """Compute the average rating for all movies in the train set,
        and map these averages to the test set as a prediction.

        If a movie in the test set is not present in the training set,
        we simply predict the global average rating of the training set.
        """
        X_train, y_train = X.iloc[train_idx].copy(), y.iloc[train_idx]
        X_test, y_test = X.iloc[test_idx], y.iloc[test_idx]

        X_train["y"] = y_train

        movie_avg_rating = X_train.groupby("movieId")["y"].mean().to_frame().reset_index()

        y_pred = X_test.merge(movie_avg_rating, on="movieId", how="left")["y"]
        y_pred = y_pred.fillna(y_pred.mean())

        return r2_score(y_true=y_test, y_pred=y_pred)


    all_baseline_r2 = []
    for train_idx, test_idx in TimeSeriesSplit(n_splits=10).split(X, y):
        all_baseline_r2.append(baseline_r2(X, y, train_idx, test_idx))

    results.insert(0, "naive mean estimator", all_baseline_r2)

    # we only keep the 5 out of 10 last results
    # because the initial size of the train set is rather small
    fig, ax = plt.subplots(layout="constrained")
    sns.boxplot(results.tail(5), palette="magma", ax=ax)
    ax.set_ylabel("R2 score")
    ax.set_title("Hyper parameters grid-search results")
    plt.tight_layout()




.. image-sg:: /auto_examples/images/sphx_glr_08_join_aggregation_003.png
   :alt: Hyper parameters grid-search results
   :srcset: /auto_examples/images/sphx_glr_08_join_aggregation_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/circleci/project/examples/08_join_aggregation.py:290: UserWarning: The figure layout has changed to tight
      plt.tight_layout()




.. GENERATED FROM PYTHON SOURCE LINES 293-305

The naive estimator has a lower performance than our pipeline, which means
that our extracted features brought some predictive power.

It seems that using the ``"value_counts"`` as an aggregation operator for
|AggTarget| yields better performances than using the mean (which is
equivalent to using the |TargetEncoder|).

Here, the number of bins encoding the target is proportional to the
performance: computing the mean yields a single statistic, whereas histograms
yield a density over a reduced set of bins, and ``"value_counts"`` yields an
exhaustive histogram over all the possible values of ratings
(here 10 different values, from 0.5 to 5).


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 18.376 seconds)


.. _sphx_glr_download_auto_examples_08_join_aggregation.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/skrub-data/skrub/0.1.0?urlpath=lab/tree/notebooks/auto_examples/08_join_aggregation.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: lite-badge

      .. image:: images/jupyterlite_badge_logo.svg
        :target: ../lite/lab/?path=auto_examples/08_join_aggregation.ipynb
        :alt: Launch JupyterLite
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 08_join_aggregation.ipynb <08_join_aggregation.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 08_join_aggregation.py <08_join_aggregation.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
