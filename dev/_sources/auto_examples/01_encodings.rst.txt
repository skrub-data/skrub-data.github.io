
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/01_encodings.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_01_encodings.py>`
        to download the full example code or to run this example in your browser via JupyterLite or Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_01_encodings.py:


.. _example_encodings:

=====================================================================
Encoding: from a dataframe to a numerical matrix for machine learning
=====================================================================

This example demonstrates how to transform a somewhat complicated dataframe
to a matrix well suited for machine-learning. We study the case of predicting wages
using the `employee salaries <https://www.openml.org/d/42125>`_ dataset.

.. |TableVectorizer| replace::
    :class:`~skrub.TableVectorizer`

.. |Pipeline| replace::
    :class:`~sklearn.pipeline.Pipeline`

.. |OneHotEncoder| replace::
     :class:`~sklearn.preprocessing.OneHotEncoder`

.. |GapEncoder| replace::
    :class:`~skrub.GapEncoder`

.. |DatetimeEncoder| replace::
    :class:`~skrub.DatetimeEncoder`

.. |HGBR| replace::
    :class:`~sklearn.ensemble.HistGradientBoostingRegressor`

.. |RandomForestRegressor| replace::
     :class:`~sklearn.ensemble.RandomForestRegressor`

.. |permutation importances| replace::
     :func:`~sklearn.inspection.permutation_importance`

.. GENERATED FROM PYTHON SOURCE LINES 38-42

A simple prediction pipeline
----------------------------

Let's first retrieve the dataset:

.. GENERATED FROM PYTHON SOURCE LINES 42-47

.. code-block:: Python


    from skrub.datasets import fetch_employee_salaries

    dataset = fetch_employee_salaries()








.. GENERATED FROM PYTHON SOURCE LINES 48-50

We denote *X*, employees characteristics (our input data), and *y*,
the annual salary (our target column):

.. GENERATED FROM PYTHON SOURCE LINES 50-56

.. code-block:: Python


    X = dataset.X
    y = dataset.y

    X






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>gender</th>
          <th>department</th>
          <th>department_name</th>
          <th>division</th>
          <th>assignment_category</th>
          <th>employee_position_title</th>
          <th>date_first_hired</th>
          <th>year_first_hired</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>F</td>
          <td>POL</td>
          <td>Department of Police</td>
          <td>MSB Information Mgmt and Tech Division Records...</td>
          <td>Fulltime-Regular</td>
          <td>Office Services Coordinator</td>
          <td>09/22/1986</td>
          <td>1986</td>
        </tr>
        <tr>
          <th>1</th>
          <td>M</td>
          <td>POL</td>
          <td>Department of Police</td>
          <td>ISB Major Crimes Division Fugitive Section</td>
          <td>Fulltime-Regular</td>
          <td>Master Police Officer</td>
          <td>09/12/1988</td>
          <td>1988</td>
        </tr>
        <tr>
          <th>2</th>
          <td>F</td>
          <td>HHS</td>
          <td>Department of Health and Human Services</td>
          <td>Adult Protective and Case Management Services</td>
          <td>Fulltime-Regular</td>
          <td>Social Worker IV</td>
          <td>11/19/1989</td>
          <td>1989</td>
        </tr>
        <tr>
          <th>3</th>
          <td>M</td>
          <td>COR</td>
          <td>Correction and Rehabilitation</td>
          <td>PRRS Facility and Security</td>
          <td>Fulltime-Regular</td>
          <td>Resident Supervisor II</td>
          <td>05/05/2014</td>
          <td>2014</td>
        </tr>
        <tr>
          <th>4</th>
          <td>M</td>
          <td>HCA</td>
          <td>Department of Housing and Community Affairs</td>
          <td>Affordable Housing Programs</td>
          <td>Fulltime-Regular</td>
          <td>Planning Specialist III</td>
          <td>03/05/2007</td>
          <td>2007</td>
        </tr>
        <tr>
          <th>...</th>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
        </tr>
        <tr>
          <th>9223</th>
          <td>F</td>
          <td>HHS</td>
          <td>Department of Health and Human Services</td>
          <td>School Based Health Centers</td>
          <td>Fulltime-Regular</td>
          <td>Community Health Nurse II</td>
          <td>11/03/2015</td>
          <td>2015</td>
        </tr>
        <tr>
          <th>9224</th>
          <td>F</td>
          <td>FRS</td>
          <td>Fire and Rescue Services</td>
          <td>Human Resources Division</td>
          <td>Fulltime-Regular</td>
          <td>Fire/Rescue Division Chief</td>
          <td>11/28/1988</td>
          <td>1988</td>
        </tr>
        <tr>
          <th>9225</th>
          <td>M</td>
          <td>HHS</td>
          <td>Department of Health and Human Services</td>
          <td>Child and Adolescent Mental Health Clinic Serv...</td>
          <td>Parttime-Regular</td>
          <td>Medical Doctor IV - Psychiatrist</td>
          <td>04/30/2001</td>
          <td>2001</td>
        </tr>
        <tr>
          <th>9226</th>
          <td>M</td>
          <td>CCL</td>
          <td>County Council</td>
          <td>Council Central Staff</td>
          <td>Fulltime-Regular</td>
          <td>Manager II</td>
          <td>09/05/2006</td>
          <td>2006</td>
        </tr>
        <tr>
          <th>9227</th>
          <td>M</td>
          <td>DLC</td>
          <td>Department of Liquor Control</td>
          <td>Licensure, Regulation and Education</td>
          <td>Fulltime-Regular</td>
          <td>Alcohol/Tobacco Enforcement Specialist II</td>
          <td>01/30/2012</td>
          <td>2012</td>
        </tr>
      </tbody>
    </table>
    <p>9228 rows × 8 columns</p>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 57-66

We observe diverse columns in the dataset:
  - binary (``'gender'``),
  - numerical (``'employee_annual_salary'``),
  - categorical (``'department'``, ``'department_name'``, ``'assignment_category'``),
  - datetime (``'date_first_hired'``)
  - dirty categorical (``'employee_position_title'``, ``'division'``).

Using skrub's |TableVectorizer|, we can now already build a machine-learning
pipeline and train it:

.. GENERATED FROM PYTHON SOURCE LINES 66-74

.. code-block:: Python


    from sklearn.ensemble import HistGradientBoostingRegressor
    from sklearn.pipeline import make_pipeline
    from skrub import TableVectorizer

    pipeline = make_pipeline(TableVectorizer(), HistGradientBoostingRegressor())
    pipeline.fit(X, y)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-container-id-1 {color: black;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id="sk-container-id-1" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;tablevectorizer&#x27;, TableVectorizer()),
                    (&#x27;histgradientboostingregressor&#x27;,
                     HistGradientBoostingRegressor())])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-1" type="checkbox" ><label for="sk-estimator-id-1" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;tablevectorizer&#x27;, TableVectorizer()),
                    (&#x27;histgradientboostingregressor&#x27;,
                     HistGradientBoostingRegressor())])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-2" type="checkbox" ><label for="sk-estimator-id-2" class="sk-toggleable__label sk-toggleable__label-arrow">tablevectorizer: TableVectorizer</label><div class="sk-toggleable__content"><pre>TableVectorizer()</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-3" type="checkbox" ><label for="sk-estimator-id-3" class="sk-toggleable__label sk-toggleable__label-arrow">datetime_transformer: DatetimeEncoder</label><div class="sk-toggleable__content"><pre>DatetimeEncoder()</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-4" type="checkbox" ><label for="sk-estimator-id-4" class="sk-toggleable__label sk-toggleable__label-arrow">DatetimeEncoder</label><div class="sk-toggleable__content"><pre>DatetimeEncoder()</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-5" type="checkbox" ><label for="sk-estimator-id-5" class="sk-toggleable__label sk-toggleable__label-arrow">high_cardinality_transformer: GapEncoder</label><div class="sk-toggleable__content"><pre>GapEncoder(n_components=30)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-6" type="checkbox" ><label for="sk-estimator-id-6" class="sk-toggleable__label sk-toggleable__label-arrow">GapEncoder</label><div class="sk-toggleable__content"><pre>GapEncoder(n_components=30)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-7" type="checkbox" ><label for="sk-estimator-id-7" class="sk-toggleable__label sk-toggleable__label-arrow">low_cardinality_transformer: OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(drop=&#x27;if_binary&#x27;, handle_unknown=&#x27;ignore&#x27;, sparse_output=False)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-8" type="checkbox" ><label for="sk-estimator-id-8" class="sk-toggleable__label sk-toggleable__label-arrow">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(drop=&#x27;if_binary&#x27;, handle_unknown=&#x27;ignore&#x27;, sparse_output=False)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-9" type="checkbox" ><label for="sk-estimator-id-9" class="sk-toggleable__label sk-toggleable__label-arrow">HistGradientBoostingRegressor</label><div class="sk-toggleable__content"><pre>HistGradientBoostingRegressor()</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 75-81

What just happened here?

We actually gave our dataframe as an input to the |TableVectorizer| and it
returned an output useful for the scikit-learn model.

Let's explore the internals of our encoder, the |TableVectorizer|:

.. GENERATED FROM PYTHON SOURCE LINES 81-89

.. code-block:: Python


    from pprint import pprint

    # Recover the TableVectorizer from the Pipeline
    tv = pipeline.named_steps["tablevectorizer"]

    pprint(tv.transformers_)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [('numeric', 'passthrough', ['year_first_hired']),
     ('datetime', DatetimeEncoder(), ['date_first_hired']),
     ('low_card_cat',
      OneHotEncoder(drop='if_binary', handle_unknown='ignore', sparse_output=False),
      ['gender', 'department', 'department_name', 'assignment_category']),
     ('high_card_cat',
      GapEncoder(n_components=30),
      ['division', 'employee_position_title'])]




.. GENERATED FROM PYTHON SOURCE LINES 90-92

We observe it has automatically assigned an appropriate encoder to
corresponding columns:

.. GENERATED FROM PYTHON SOURCE LINES 94-96

- The |OneHotEncoder| for low cardinality string variables, the columns
  ``'gender'``, ``'department'``, ``'department_name'`` and ``'assignment_category'``.

.. GENERATED FROM PYTHON SOURCE LINES 96-99

.. code-block:: Python


    tv.named_transformers_["low_card_cat"].get_feature_names_out()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    array(['gender_F', 'gender_M', 'gender_nan', 'department_BOA',
           'department_BOE', 'department_CAT', 'department_CCL',
           'department_CEC', 'department_CEX', 'department_COR',
           'department_CUS', 'department_DEP', 'department_DGS',
           'department_DHS', 'department_DLC', 'department_DOT',
           'department_DPS', 'department_DTS', 'department_ECM',
           'department_FIN', 'department_FRS', 'department_HCA',
           'department_HHS', 'department_HRC', 'department_IGR',
           'department_LIB', 'department_MPB', 'department_NDA',
           'department_OAG', 'department_OCP', 'department_OHR',
           'department_OIG', 'department_OLO', 'department_OMB',
           'department_PIO', 'department_POL', 'department_PRO',
           'department_REC', 'department_SHF', 'department_ZAH',
           'department_name_Board of Appeals Department',
           'department_name_Board of Elections',
           'department_name_Community Engagement Cluster',
           'department_name_Community Use of Public Facilities',
           'department_name_Correction and Rehabilitation',
           "department_name_County Attorney's Office",
           'department_name_County Council',
           'department_name_Department of Environmental Protection',
           'department_name_Department of Finance',
           'department_name_Department of General Services',
           'department_name_Department of Health and Human Services',
           'department_name_Department of Housing and Community Affairs',
           'department_name_Department of Liquor Control',
           'department_name_Department of Permitting Services',
           'department_name_Department of Police',
           'department_name_Department of Public Libraries',
           'department_name_Department of Recreation',
           'department_name_Department of Technology Services',
           'department_name_Department of Transportation',
           'department_name_Ethics Commission',
           'department_name_Fire and Rescue Services',
           'department_name_Merit System Protection Board Department',
           'department_name_Non-Departmental Account',
           'department_name_Office of Agriculture',
           'department_name_Office of Consumer Protection',
           'department_name_Office of Emergency Management and Homeland Security',
           'department_name_Office of Human Resources',
           'department_name_Office of Human Rights',
           'department_name_Office of Intergovernmental Relations Department',
           'department_name_Office of Legislative Oversight',
           'department_name_Office of Management and Budget',
           'department_name_Office of Procurement',
           'department_name_Office of Public Information',
           'department_name_Office of Zoning and Administrative Hearings',
           'department_name_Office of the Inspector General',
           'department_name_Offices of the County Executive',
           "department_name_Sheriff's Office",
           'assignment_category_Parttime-Regular'], dtype=object)



.. GENERATED FROM PYTHON SOURCE LINES 100-103

- The |GapEncoder| for high cardinality string columns, ``'employee_position_title'``
  and ``'division'``. The |GapEncoder| is a powerful encoder that can handle dirty
  categorical columns.

.. GENERATED FROM PYTHON SOURCE LINES 103-106

.. code-block:: Python


    tv.named_transformers_["high_card_cat"].get_feature_names_out()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    array(['gaithersburg, the, clarksburg', 'station, state, estate',
           'behavioral, health, school', 'programs, projects, recruit',
           'district, patrol, 3rd', 'emergency, centers, center',
           'spring, silver, ride', 'resources, resource, solid',
           'management, budget, fleet', 'eligibility, assistance, medical',
           'warehouse, delivery, operations',
           'investigative, investigations, criminal',
           'supports, support, sports', 'toddlers, custody, members',
           'services, highway, service', 'technology, systems, telephone',
           'security, mc311, mccf', 'animal, division, supervision',
           'safety, traffic, alcohol', 'squad, urban, team',
           'welfare, children, childhood', 'automotive, equipment, automated',
           'communications, communication, immunization',
           'rockville, twinbrook, library',
           'maintenance, facilities, finance',
           'planning, employee, cataloging', 'development, building, design',
           'nicholson, transit, transport',
           'administration, battalion, administrative',
           'protective, family, fugitive', 'enforcement, inspector, auditor',
           'operator, equipment, bus', 'officer, office, police',
           'recruit, fire, sign', 'sheriff, deputy, manager',
           'recreation, renovation, specialist', 'income, assistance, client',
           'school, health, room', 'firefighter, master, rescuer',
           'assistant, library, librarian',
           'administrative, legislative, principal', 'corporal, pfc, private',
           'technician, mechanic, supply', 'coordinator, services, service',
           'worker, social, works', 'crossing, purchasing, engineer',
           'community, security, nurse',
           'attendant, partnerships, department',
           'lieutenant, client, maintenance', 'sergeant, candidate, cadet',
           'captain, rescue, revenue', 'correctional, correction, regional',
           'information, technology, technologist',
           'program, programs, projects', 'liquor, clerk, store',
           'environmental, budget, enviromental',
           'telecommunications, communications, safety',
           'supervisor, permitting, supervisory', 'therapist, the, hygienist',
           'warehouse, welfare, driver'], dtype=object)



.. GENERATED FROM PYTHON SOURCE LINES 107-109

- The |DatetimeEncoder| to the ``'date_first_hired'`` column. The |DatetimeEncoder|
  can encode datetime columns for machine learning.

.. GENERATED FROM PYTHON SOURCE LINES 109-112

.. code-block:: Python


    tv.named_transformers_["datetime"].get_feature_names_out()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    array(['date_first_hired_year', 'date_first_hired_month',
           'date_first_hired_day', 'date_first_hired_total_seconds'],
          dtype=object)



.. GENERATED FROM PYTHON SOURCE LINES 113-116

As we can see, it gave us interpretable column names.

In total, we have a reasonable number of encoded columns:

.. GENERATED FROM PYTHON SOURCE LINES 116-121

.. code-block:: Python


    feature_names = tv.get_feature_names_out()

    len(feature_names)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    143



.. GENERATED FROM PYTHON SOURCE LINES 122-123

Let's look at the cross-validated R2 score of our model:

.. GENERATED FROM PYTHON SOURCE LINES 123-130

.. code-block:: Python


    from sklearn.model_selection import cross_val_score
    import numpy as np

    scores = cross_val_score(pipeline, X, y)
    print(f"R2 score:  mean: {np.mean(scores):.3f}; std: {np.std(scores):.3f}\n")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    R2 score:  mean: 0.919; std: 0.013





.. GENERATED FROM PYTHON SOURCE LINES 131-132

The simple pipeline applied on this complex dataset gave us very good results.

.. GENERATED FROM PYTHON SOURCE LINES 134-146

Feature importances in the statistical model
--------------------------------------------

In this section, after training a regressor, we will plot the feature importances.

.. topic:: Note:

  To minimize computation time, we use the feature importances computed by the
  |RandomForestRegressor|, but you should prefer |permutation importances|
  instead (which are less subject to biases).

First, let's train another scikit-learn regressor, the |RandomForestRegressor|:

.. GENERATED FROM PYTHON SOURCE LINES 146-154

.. code-block:: Python


    from sklearn.ensemble import RandomForestRegressor

    regressor = RandomForestRegressor()

    pipeline = make_pipeline(TableVectorizer(), regressor)
    pipeline.fit(X, y)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-container-id-2 {color: black;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id="sk-container-id-2" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;tablevectorizer&#x27;, TableVectorizer()),
                    (&#x27;randomforestregressor&#x27;, RandomForestRegressor())])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-10" type="checkbox" ><label for="sk-estimator-id-10" class="sk-toggleable__label sk-toggleable__label-arrow">Pipeline</label><div class="sk-toggleable__content"><pre>Pipeline(steps=[(&#x27;tablevectorizer&#x27;, TableVectorizer()),
                    (&#x27;randomforestregressor&#x27;, RandomForestRegressor())])</pre></div></div></div><div class="sk-serial"><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-11" type="checkbox" ><label for="sk-estimator-id-11" class="sk-toggleable__label sk-toggleable__label-arrow">tablevectorizer: TableVectorizer</label><div class="sk-toggleable__content"><pre>TableVectorizer()</pre></div></div></div><div class="sk-parallel"><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-12" type="checkbox" ><label for="sk-estimator-id-12" class="sk-toggleable__label sk-toggleable__label-arrow">datetime_transformer: DatetimeEncoder</label><div class="sk-toggleable__content"><pre>DatetimeEncoder()</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-13" type="checkbox" ><label for="sk-estimator-id-13" class="sk-toggleable__label sk-toggleable__label-arrow">DatetimeEncoder</label><div class="sk-toggleable__content"><pre>DatetimeEncoder()</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-14" type="checkbox" ><label for="sk-estimator-id-14" class="sk-toggleable__label sk-toggleable__label-arrow">high_cardinality_transformer: GapEncoder</label><div class="sk-toggleable__content"><pre>GapEncoder(n_components=30)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-15" type="checkbox" ><label for="sk-estimator-id-15" class="sk-toggleable__label sk-toggleable__label-arrow">GapEncoder</label><div class="sk-toggleable__content"><pre>GapEncoder(n_components=30)</pre></div></div></div></div></div></div><div class="sk-parallel-item"><div class="sk-item"><div class="sk-label-container"><div class="sk-label sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-16" type="checkbox" ><label for="sk-estimator-id-16" class="sk-toggleable__label sk-toggleable__label-arrow">low_cardinality_transformer: OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(drop=&#x27;if_binary&#x27;, handle_unknown=&#x27;ignore&#x27;, sparse_output=False)</pre></div></div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-17" type="checkbox" ><label for="sk-estimator-id-17" class="sk-toggleable__label sk-toggleable__label-arrow">OneHotEncoder</label><div class="sk-toggleable__content"><pre>OneHotEncoder(drop=&#x27;if_binary&#x27;, handle_unknown=&#x27;ignore&#x27;, sparse_output=False)</pre></div></div></div></div></div></div></div></div><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-18" type="checkbox" ><label for="sk-estimator-id-18" class="sk-toggleable__label sk-toggleable__label-arrow">RandomForestRegressor</label><div class="sk-toggleable__content"><pre>RandomForestRegressor()</pre></div></div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 155-156

We are retrieving the feature importances:

.. GENERATED FROM PYTHON SOURCE LINES 156-163

.. code-block:: Python


    avg_importances = regressor.feature_importances_
    std_importances = np.std(
        [tree.feature_importances_ for tree in regressor.estimators_], axis=0
    )
    indices = np.argsort(avg_importances)[::-1]








.. GENERATED FROM PYTHON SOURCE LINES 164-165

And plotting the results:

.. GENERATED FROM PYTHON SOURCE LINES 165-183

.. code-block:: Python


    import matplotlib.pyplot as plt

    top_indices = indices[:20]
    labels = feature_names[top_indices]

    plt.figure(figsize=(12, 9))
    plt.barh(
        y=labels,
        width=avg_importances[top_indices],
        yerr=std_importances[top_indices],
        color="b",
    )
    plt.yticks(fontsize=15)
    plt.title("Feature importances")
    plt.tight_layout(pad=1)
    plt.show()




.. image-sg:: /auto_examples/images/sphx_glr_01_encodings_001.png
   :alt: Feature importances
   :srcset: /auto_examples/images/sphx_glr_01_encodings_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 184-188

We can see that features such the time elapsed since being hired, having a full-time employment, and the position, seem to be the most informative for prediction.
However, feature importances must not be over-interpreted -- they capture statistical associations `rather than causal effects <https://en.wikipedia.org/wiki/Correlation_does_not_imply_causation>`_.
Moreover, the fast feature importance method used here suffers from biases favouring features with larger cardinality, as illustrated in a scikit-learn `example <https://scikit-learn.org/dev/auto_examples/inspection/plot_permutation_importance.html#sphx-glr-auto-examples-inspection-plot-permutation-importance-py>`_.
In general we should prefer |permutation importances|, but it is a slower method.

.. GENERATED FROM PYTHON SOURCE LINES 190-201

Conclusion
----------

In this example, we motivated the need for a simple machine learning
pipeline, which we built using the |TableVectorizer| and a
|HGBR|.

We saw that by default, it works well on a heterogeneous dataset.

To better understand our dataset, and without much effort, we were also able
to plot the feature importances.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 9.311 seconds)


.. _sphx_glr_download_auto_examples_01_encodings.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/skrub-data/skrub/main?urlpath=lab/tree/notebooks/auto_examples/01_encodings.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: lite-badge

      .. image:: images/jupyterlite_badge_logo.svg
        :target: ../lite/lab/?path=auto_examples/01_encodings.ipynb
        :alt: Launch JupyterLite
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 01_encodings.ipynb <01_encodings.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 01_encodings.py <01_encodings.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
